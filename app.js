#!/usr/bin/env node
// Generated by CoffeeScript 1.6.3
(function() {
  var app, chokidar, compile_condition, config, connect, cwd, e, fs, g_socket, http, io, livejs, master, path, reload_condition, server, socketio, spawn, system, watcher,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  connect = require('connect');

  http = require('http');

  socketio = require('socket.io');

  fs = require('fs');

  chokidar = require("chokidar");

  path = require("path");

  spawn = require("child_process").spawn;

  cwd = process.cwd();

  try {
    config = require(path.join(cwd, ".live.json"));
  } catch (_error) {
    e = _error;
    console.error("please create a .live.json in your project path.");
    console.error(e);
    process.exit(0);
  }

  livejs = function(file) {
    return function(req, res, next) {
      var rs;
      if (req.originalUrl === '/live.js') {
        res.writeHead(200, {
          "Content-type": 'application/javascript'
        });
        rs = fs.createReadStream(path.join(__dirname, "live.js"));
        return rs.pipe(res);
      } else {
        return next();
      }
    };
  };

  app = connect().use(connect.favicon()).use(connect["static"](cwd)).use(connect.directory(cwd)).use(connect.cookieParser()).use(connect.session({
    secret: 'my secret here'
  })).use(livejs('live.js')).use(function(req, res) {
    return res.end('Hello from Connect!\n');
  });

  server = http.createServer(app);

  io = socketio.listen(server);

  server.listen(3002);

  watcher = chokidar.watch(cwd, {
    ignored: /^\./,
    persistent: true
  });

  g_socket = null;

  system = function(cmd, args) {
    var ls;
    ls = spawn(cmd, args);
    ls.stdout.on("data", function(data) {
      return console.log("stdout: " + data);
    });
    ls.stderr.on("data", function(data) {
      return console.log("stderr: " + data);
    });
    return ls.on("close", function(code) {
      return console.log(cmd, args);
    });
  };

  compile_condition = config.compile_condition;

  reload_condition = config.reload_condition;

  watcher.on("change", function(changed_path, stats) {
    var i, regexp, _ref;
    console.log("changed", changed_path);
    i = 0;
    while (i < compile_condition.length) {
      regexp = new RegExp(compile_condition[i].from);
      if (regexp.exec(changed_path)) {
        if (path.extname(changed_path) === ".coffee") {
          system("coffee", ["-c", "-o", compile_condition[i].to, changed_path]);
        }
        if (path.extname(changed_path) === ".scss") {
          system("scss", [changed_path, compile_condition[i].to + path.basename(changed_path, ".scss") + ".css"]);
        }
      }
      i++;
    }
    if (_ref = path.extname(changed_path), __indexOf.call(reload_condition, _ref) >= 0) {
      if (g_socket) {
        g_socket.broadcast.emit("change", changed_path);
        return g_socket.emit("change", changed_path);
      }
    }
  }).on("error", function(error) {
    return console.error("Error happended", error);
  });

  io.set('log level', 1);

  master = io.of('/livereload');

  master.on('connection', function(socket) {
    console.log('connection');
    return g_socket = socket;
  });

}).call(this);
